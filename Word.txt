Security is a principal concern when entrusting an organization¡¯s critical infor- mation to geographically dispersed cloud platforms not under the direct control of that organization. In addition to the conventional IT information system security procedures, designing security into cloud software during the software development life cycle can greatly reduce the cloud attack surface.
In the document ¡°Security Guidance for Critical Areas of Focus in Cloud Computing,¡±1 the Cloud Security Alliance emphasizes the following points rela- tive to the secure software life cycle in their listing of 15 cloud security domains:  ? Domain 6, Information Life Cycle Management ¡ª ¡°Understand cloud provider policies and processes for data retention and destruction and how they compare with internal organizational policy. Be aware that data retention assurance may be easier for the cloud provider to demonstrate, but data destruction may be very diffi  cult. Perform regular backup and recovery tests to assure that logical segregation and controls are effective.¡± ? Domain 11, Application Security ¡ª ¡°IaaS, PaaS and SaaS create differing trust boundaries for the software development lifecycle, which must be accounted for during the development, testing and production deploy- ment of applications.¡± ? Domain 14, Storage ¡ª ¡°Understand cloud provider storage retirement pro- cesses. Data destruction is extremely diffi  cult in a multi-tenant environment 62 Chapter 3 ? Cloud Computing Software Security Fundamentals and the cloud provider should be utilizing strong storage encryption that renders data unreadable when storage is recycled, disposed of, or accessed by any means outside of authorized applications.¡±With cloud computing providing SaaS, secure software is a critical issue. From the cloud consumer¡¯s point of view, using SaaS in the cloud reduces the need for secure software development by the customer. The requirement for secure soft- ware development is transferred to the cloud provider. However, the user might still fi  nd it necessary to develop custom code for the cloud. Whoever develops the software, this process requires a strong commitment to a formal, secure software development life cycle, including design, testing, secure deployment, patch management, and disposal. Yet, in many instances, software security is treated as an add-on to extant software and not as an important element of the development process.
These and other related issues in the secure software development life cycle for cloud computing are explored in detail in this chapter.
Cloud Information Security Objectives Developing secure software is based on applying the secure software design principles that form the fundamental basis for software assurance. Software assurance has been given many defi  nitions, and it is important to understand the concept. The Software Security Assurance Report2 defi  nes software assurance as ¡°the basis for gaining justifi  able confi  dence that software will consistently exhibit all properties required to ensure that the software, in operation, will continue to operate dependably despite the presence of sponsored (intentional) faults. In practical terms, such software must be able to resist most attacks, toler- ate as many as possible of those attacks it cannot resist, and contain the damage and recover to a normal level of operation as soon as possible after any attacks it is unable to resist or tolerate.¡±The U.S. Department of Defense (DoD) Software Assurance Initiative3 defi  nes software assurance as ¡°the level of confi  dence that software functions as intended and is free of vulnerabilities, either intentionally or unintentionally designed or inserted as part of the software.¡±The Data and Analysis Center for Software (DACS)4 requires that software must exhibit the following three properties to be considered secure:  ? Dependability ¡ª Software that executes predictably and operates correctly under a variety of conditions, including when under attack or running on a malicious host  ? Trustworthiness ¡ª Software that contains a minimum number of vulnerabilities or no vulnerabilities or weaknesses that could sabo- tage the software¡¯s dependability. It must also be resistant to malicious logic.
 Chapter 3 ? Cloud Computing Software Security Fundamentals 63  ? Survivability (Resilience) ¡ª Software that is resistant to or tolerant of attacks and has the ability to recover as quickly as possible with as little harm as possible Seven complementary principles that support information assurance are confi  dentiality, integrity, availability, authentication, authorization, auditing, and accountability. These concepts are summarized in the following sections.
Confi  dentiality, Integrity, and Availability Confi  dentiality, integrity, and availability are sometimes known as the CIA triad of information system security, and are important pillars of cloud software assurance.
Confi  dentiality Confi  dentiality refers to the prevention of intentional or unintentional unauthor- ized disclosure of information. Confi  dentiality in cloud systems is related to the areas of intellectual property rights, covert channels, traffi  c analysis, encryp- tion, and inference:  ? Intellectual property rights ¡ª Intellectual property (IP) includes inventions, designs, and artistic, musical, and literary works. Rights to intellectual property are covered by copyright laws, which protect cre- ations of the mind, and patents, which are granted for new inventions.
 ? Covert channels ¡ª A covert channel is an unauthorized and unintended communication path that enables the exchange of information. Covert chan- nels can be accomplished through timing of messages or inappropriate use of storage mechanisms.
 ? Traffi  c analysis ¡ª Traffi  c analysis is a form of confi  dentiality breach that can be accomplished by analyzing the volume, rate, source, and destination of message traffi  c, even if it is encrypted. Increased message activity and high bursts of traffi  c can indicate a major event is occurring. Countermeasures to traffi  c analysis include maintaining a near-constant rate of message traffi  c and disguising the source and destination locations of the traffi  c.
 ? Encryption ¡ª Encryption involves scrambling messages so that they can- not be read by an unauthorized entity, even if they are intercepted. The amount of effort (work factor) required to decrypt the message is a function of the strength of the encryption key and the robustness and quality of the encryption algorithm.
 ? Inference ¡ª Inference is usually associated with database security. Inference is the ability of an entity to use and correlate information protected at one level of security to uncover information that is protected at a higher security level.
64 Chapter 3 ? Cloud Computing Software Security Fundamentals Integrity The concept of cloud information integrity requires that the following three principles are met:  ? Modifi  cations are not made to data by unauthorized personnel or processes.
 ? Unauthorized modifi  cations are not made to data by authorized person- nel or processes.
 ? The data is internally and externally consistent ¡ª in other words, the internal information is consistent both among all sub-entities and with the real-world, external situation.
Availability Availability ensures the reliable and timely access to cloud data or cloud com- puting resources by the appropriate personnel. Availability guarantees that the systems are functioning properly when needed. In addition, this concept guarantees that the security services of the cloud system are in working order.
A denial-of-service attack is an example of a threat against availability.
The reverse of confi  dentiality, integrity, and availability is disclosure, altera- tion, and destruction (DAD).
Cloud Security Services Additional factors that directly affect cloud software assurance include authen- tication, authorization, auditing, and accountability, as summarized in the following sections.
Authentication Authentication is the testing or reconciliation of evidence of a user¡¯s identity. It establishes the user¡¯s identity and ensures that users are who they claim to be.
For example, a user presents an identity (user ID) to a computer login screen and then has to provide a password. The computer system authenticates the user by verifying that the password corresponds to the individual presenting the ID.
Authorization Authorization refers to rights and privileges granted to an individual or process that enable access to computer resources and information assets. Once a user¡¯s  Chapter 3 ? Cloud Computing Software Security Fundamentals 65 identity and authentication are established, authorization levels determine the extent of system rights a user can hold.
Auditing To maintain operational assurance, organizations use two basic methods: system audits and monitoring. These methods can be employed by the cloud customer, the cloud provider, or both, depending on asset architecture and deployment.  
 ? A system audit is a one-time or periodic event to evaluate security.
 ? Monitoring refers to an ongoing activity that examines either the system or the users, such as intrusion detection.
Information technology (IT) auditors are often divided into two types: internal and external. Internal auditors typically work for a given organization, whereas external auditors do not. External auditors are often certifi  ed public accountants (CPAs) or other audit professionals who are hired to perform an independent audit of an organization¡¯s fi  nancial statements. Internal auditors usually have a much broader mandate than external auditors, such as checking for compliance and standards of due care, auditing operational cost effi  ciencies, and recom- mending the appropriate controls.
IT auditors typically audit the following functions:  ? System and transaction controls  ? Systems development standards  ? Backup controls  ? Data library procedures  ? Data center security  ? Contingency plans In addition, IT auditors might recommend improvements to controls, and they often participate in a system¡¯s development process to help an organization avoid costly reengineering after the system¡¯s implementation.
An audit trail or log is a set of records that collectively provide documentary evidence of processing, used to aid in tracing from original transactions forward to related records and reports, and/or backward from records and reports to their component source transactions. Audit trails may be limited to specifi  c events or they may encompass all of the activities on a system.
Audit logs should record the following:  ? The transaction¡¯s date and time  ? Who processed the transaction 66 Chapter 3 ? Cloud Computing Software Security Fundamentals  ? At which terminal the transaction was processed  ? Various security events relating to the transaction In addition, an auditor should examine the audit logs for the following:  ? Amendments to production jobs  ? Production job reruns  ? Computer operator practices  ? All commands directly initiated by the user  ? All identifi  cation and authentication attempts  ? Files and resources accessed Accountability Accountability is the ability to determine the actions and behaviors of a single individual within a cloud system and to identify that particular individual. Audit trails and logs support accountability and can be used to conduct postmortem studies in order to analyze historical events and the individuals or processes asso- ciated with those events. Accountability is related to the concept of nonrepudiation, wherein an individual cannot successfully deny the performance of an action.
Relevant Cloud Security Design Principles Historically, computer software was not written with security in mind; but because of the increasing frequency and sophistication of malicious attacks against information systems, modern software design methodologies include security as a primary objective. With cloud computing systems seeking to meet multiple objectives, such as cost, performance, reliability, maintainability, and security, trade-offs have to be made. A completely secure system will exhibit poor performance characteristics or might not function at all.
Technically competent hackers can usually fi  nd a way to break into a computer system, given enough time and resources. The goal is to have a system that is secure enough for everyday use while exhibiting reasonable performance and reliability characteristics.
In a 1974 paper that is still relevant today,5 Saltzer and Schroeder of the University of Virginia addressed the protection of information stored in a computer system by focusing on hardware and software issues that are necessary to support information protection. The paper presented the following 11 security design principles:  ? Least privilege  ? Separation of duties  Chapter 3 ? Cloud Computing Software Security Fundamentals 67  ? Defense in depth  ? Fail safe  ? Economy of mechanism  ? Complete mediation  ? Open design  ? Least common mechanism  ? Psychological acceptability  ? Weakest link  ? Leveraging existing components The fundamental characteristics of these principles are summarized in the following sections.
Least Privilege The principle of least privilege maintains that an individual, process, or other type of entity should be given the minimum privileges and resources for the minimum period of time required to complete a task. This approach reduces the opportunity for unauthorized access to sensitive information.
Separation of Duties Separation of duties requires that completion of a specifi  ed sensitive activity or access to sensitive objects is dependent on the satisfaction of a plurality of condi- tions. For example, an authorization would require signatures of more than one individual, or the arming of a weapons system would require two individuals with different keys. Thus, separation of duties forces collusion among entities in order to compromise the system.
Defense in Depth Defense in depth is the application of multiple layers of protection wherein a subsequent layer will provide protection if a previous layer is breached.
The Information Assurance Technical Framework Forum (IATFF), an orga- nization sponsored by the National Security Agency (NSA), has produced a document titled the ¡°Information Assurance Technical Framework¡± (IATF) that provides excellent guidance on the concepts of defense in depth.
The IATFF encourages and supports technical interchanges on the topic of information assurance among U.S. industry, U.S. academic institutions, and U.S. government agencies. Information on the IATFF document can be found at www.niap-ccevs.org/cc-scheme/IATF_3.1-Chapter_03-ISSEP.pdf.
68 Chapter 3 ? Cloud Computing Software Security Fundamentals The IATF document 3.16 stresses the importance of the people involved, the operations required, and the technology needed to provide information assurance and to meet the organization¡¯s mission.
The defense-in-depth strategy as defi  ned in IATF document 3.1 promotes application of the following information assurance principles:  ? Defense in multiple places ¡ª Information protection mechanisms placed in a number of locations to protect against internal and external threats  ? Layered defenses ¡ª A plurality of information protection and detection mechanisms employed so that an adversary or threat must negotiate a series of barriers to gain access to critical information  ? Security robustness ¡ª An estimate of the robustness of information assur- ance elements based on the value of the information system component to be protected and the anticipated threats  ? Deploy KMI/PKI ¡ª Use of robust key management infrastructures (KMI) and public key infrastructures (PKI)  ? Deploy intrusion detection systems ¡ª Application of intrusion detection mechanisms to detect intrusions, evaluate information, examine results, and, if necessary, take action Fail Safe Fail safe means that if a cloud system fails it should fail to a state in which the security of the system and its data are not compromised. One implementation of this philosophy would be to make a system default to a state in which a user or process is denied access to the system. A complementary rule would be to ensure that when the system recovers, it should recover to a secure state and not permit unauthorized access to sensitive information. This approach is based on using permissions instead of exclusions.
In the situation where system recovery is not done automatically, the failed system should permit access only by the system administrator and not by other users, until security controls are reestablished.
Economy of Mechanism Economy of mechanism promotes simple and comprehensible design and imple- mentation of protection mechanisms, so that unintended access paths do not exist or can be readily identifi  ed and eliminated.
Complete Mediation In complete meditation, every request by a subject to access an object in a com- puter system must undergo a valid and effective authorization procedure.
 Chapter 3 ? Cloud Computing Software Security Fundamentals 69 This mediation must not be suspended or become capable of being bypassed, even when the information system is being initialized, undergoing shut- down, being restarted, or is in maintenance mode. Complete mediation entails the following:  1. Identifi  cation of the entity making the access request  2. Verifi  cation that the request has not changed since its initiation  3. Application of the appropriate authorization procedures  4. Reexamination of previously authorized requests by the same entity Open Design There has always been an ongoing discussion about the merits and strengths of security designs that are kept secret versus designs that are open to scrutiny and evaluation by the community at large. A good example is an encryption system. Some feel that keeping the encryption algorithm secret makes it more diffi  cult to break. The opposing philosophy believes that exposing the algo- rithm to review and study by experts at large while keeping the encryption key secret leads to a stronger algorithm because the experts have a higher probability of discovering weaknesses in it. In general, the latter approach has proven more effective, except in the case of organizations such as the National Security Agency (NSA), which employs some of the world¡¯s best cryptographers and mathematicians.
For most purposes, an open-access cloud system design that has been evalu- ated and tested by a myriad of experts provides a more secure authentication method than one that has not been widely assessed. Security of such mechanisms depends on protecting passwords or keys.
Least Common Mechanism This principle states that a minimum number of protection mechanisms should be common to multiple users, as shared access paths can be sources of unauthorized information exchange. Shared access paths that pro- vide unintentional data transfers are known as covert channels. Thus, the least common mechanism promotes the least possible sharing of common security mechanisms.
Psychological Acceptability Psychological acceptability refers to the ease of use and intuitiveness of the user interface that controls and interacts with the cloud access control mechanisms.
Users must be able to understand the user interface and use it without having to interpret complex instructions.
70 Chapter 3 ? Cloud Computing Software Security Fundamentals Weakest Link As in the old saying ¡° A chain is only as strong as its weakest link,¡± the security of a cloud system is only as good as its weakest component. Thus, it is important to identify the weakest mechanisms in the security chain and layers of defense, and improve them so that risks to the system are mitigated to an acceptable level.
Leveraging Existing Components In many instances, the security mechanisms of a cloud implementation might not be confi  gured properly or used to their maximum capability. Reviewing the state and settings of the extant security mechanisms and ensuring that they are operating at their optimum design points will greatly improve the security posture of an information system.
Another approach that can be used to increase cloud system security by leveraging existing components is to partition the system into defended sub- units. Then, if a security mechanism is penetrated for one sub-unit, it will not affect the other sub-units, and damage to the computing resources will be minimized.
Secure Cloud Software Requirements The requirements for secure cloud software are concerned with nonfunctional issues such as minimizing or eliminating vulnerabilities and ensuring that the software will perform as required, even under attack. This goal is distinct from security functionality in software, which addresses areas that derive from the information security policy, such as identifi  cation, authentication, and authorization.
Software requirements engineering is the process of determining customer software expectations and needs, and it is conducted before the software design phase. The requirements have to be unambiguous, correct, quantifi  - able, and detailed.
Karen Goertzel, Theodore Winograd, and their contributors in ¡°Enhancing the Development Life Cycle to Produce Secure Software¡±7 from the United States Department of Defense Data and Analysis Center for Software (DACS) state that all software shares the following three security needs:  ? It must be dependable under anticipated operating conditions, and remain dependable under hostile operating conditions.
 ? It must be trustworthy in its own behavior, and in its inability to be compromised by an attacker through exploitation of vulnerabilities or insertion of malicious code.
 Chapter 3 ? Cloud Computing Software Security Fundamentals 71  ? It must be resilient enough to recover quickly to full operational capability with a minimum of damage to itself, the resources and data it handles, and the external components with which it interacts.
In the following sections, cloud software considerations related to functional security and secure properties are explored in the context of software require- ments engineering. Secure requirements for security-related cloud software functions generally defi  ne what the software has to accomplish to perform a task securely.
Secure Development Practices There are many methods for developing code. Any of them can be used to develop a secure cloud application. Every development model must have both requirements and testing. In some models, the requirements may emerge over time. It is very important that security requirements are established early in the development process.
Security in a cloud application tends to be subtle and invisible. Security is prominent at only two times in the development life cycle: requirements defi  ni- tion and testing. At other times, deadlines, capabilities, performance, the look and feel, and dozens of other issues tend to push security to the back. This is why it is important to ensure that security requirements are prominent at the beginning of the software development life cycle.
In many respects, the tools and techniques used to design and develop clean, effi  cient cloud applications will support the development of secure code as well.
Special attention, however, should be shown in the following areas:  ? Handling data ¡ª Some data is more sensitive and requires special handling.
 ? Code practices ¡ª Care must be taken not to expose too much information to a would-be attacker.
 ? Language options ¡ª Consider the strengths and weakness of the language used.
 ? Input validation and content injection ¡ª Data (content) entered by a user should never have direct access to a command or a query.
 ? Physical security of the system ¡ª Physical access to the cloud servers should be restricted.
Handling Data As the Internet continues to be a driving force in most of our everyday lives, more and more personal and sensitive information will be put on cloud servers. Requirements for handling this private information did not exist fi  ve 72 Chapter 3 ? Cloud Computing Software Security Fundamentals years ago, while other data, such as passwords, has always required special handling. Following are some special cases for the handling of sensitive or critical data:  ? Passwords should never be transmitted in the clear. They should always be encrypted.
 ? Passwords should never be viewable on the user¡¯s screen as they are entered into the computer. Even though asterisks (*) are being displayed, care must be taken to ensure that it is not just because the font is all aster- isks. If that is the case, someone could steal the password by copying and pasting the password from the screen.
 ? If possible, passwords should always be encrypted with one-way hashes.
This will ensure that no one (not even a system administrator) can extract the password from the server. The only way to break the password would be through brute-force cracking. With one-way hashing, the actual pass- words are not compared to authenticate the user; rather, the hashed value is stored on the server and is compared with the hashed value sent by the user. If the passwords cannot be decrypted, users cannot be provided their passwords when they forget them. In such cases, the system administrator must enter a new password for the user, which the user can change upon re-entering the application.
 ? Credit card and other fi  nancial information should never be sent in the clear.
 ? Cloud servers should minimize the transmissions and printing of credit card information. This includes all reports that may be used for internal use, such as troubleshooting, status, and progress reports.
 ? Sensitive data should not be passed to the cloud server as part of the query string, as the query string may be recorded in logs and accessed by persons not authorized to see the credit card information. For example, the following query string includes a credit card number: http://www.server site.com/process_card.asp?cardnumber=1234567890123456 Code Practices The minimum necessary information should be included in cloud server code.
Attackers will spend countless hours examining HTML and scripts for informa- tion that can be used to make their intrusions easier to accomplish.
Comments should be stripped from operational code, and names and other personal information should be avoided. HTML comment fi  elds should not reveal exploitable information about the developers or the organization. Comments are not bad per se, but those embedded in the HTML or client script and which may contain private information can be very dangerous in the hands of an attacker.
 Chapter 3 ? Cloud Computing Software Security Fundamentals 73 Third-party software packages, such as Web servers and FTP servers, often provide banners that indicate the version of the software that is running. Attackers can use this information to narrow their search of exploits to apply to these targets. In most cases, these banners can be suppressed or altered.
Language Options One of the most frequently discovered vulnerabilities in cloud server applica- tions is a direct result of the use of C and C++. The C language is unable to detect and prevent improper memory allocation, which can result in buffer overfl  ows.
Because the C language cannot prevent buffer overfl  ows, it is left to the pro- grammer to implement safe programming techniques. Good coding practices will check for boundary limits and ensure that functions are properly called.
This requires a great deal of discipline from the programmer; and in practice even the most experienced developers can overlook these checks occasionally.
One of the reasons Java is so popular is because of its intrinsic security mecha- nisms. Malicious language constructs should not be possible in Java. The Java Virtual Machine (JVM) is responsible for stopping buffer overfl  ows, the use of uninitialized variables, and the use of invalid opcodes.
Input Validation and Content Injection All user input that cannot be trusted must be verifi  ed and validated. Content injection occurs when the cloud server takes input from the user and applies the content of that input into commands or SQL statements. Essentially, the user¡¯s input is injected into a command that is executed by the server. Content injec- tion can occur when the server does not have a clear distinction and separation between the data input and the commands executed.
Physical Security of the System Any cloud server is vulnerable to an attacker with unlimited time and physi- cal access to the server. Additionally, physical problems could cause the server to have down time. This would be a loss of availability, which you may recall is one of the key principles of the security triad ¡ª confi  dentiality, integrity, and availability (CIA). The following items should be provided to ensure server availability:  ? Provide an uninterruptible power supply (UPS) unit with surge protection.
 ? Provide fi  re protection to minimize the loss of personnel and equipment.
 ? Provide adequate cooling and ventilation.
 ? Provide adequate lighting and workspace for maintaining and upgrad- ing the system.
74 Chapter 3 ? Cloud Computing Software Security Fundamentals  ? Restrict physical access to the server. Unauthorized persons should not get near the server. Even casual contact can lead to outages. The server space should be locked and alarmed. Any access to the space should be recorded for later evaluation should a problem occur. Inventory should be tightly controlled and monitored.
 ? The physical protections listed here should extend to the network cables and other devices (such as routers) that are critical to the cloud server¡¯s operation.